name: Deploy Backend to AWS

on:
  push:
    branches: [ main ]
    paths: [ 'pos-app-backend/**' ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Debug: List current directory contents
        echo "Current directory:"
        pwd
        ls -la
        
        # Check if the expected directory exists
        if [ -d "pos-app-backend/API" ]; then
          echo "Found pos-app-backend/API directory"
          cd pos-app-backend/API
        elif [ -d "API" ]; then
          echo "Found API directory in root"
          cd API
        else
          echo "Directory structure:"
          find . -name "Dockerfile" -type f
          exit 1
        fi
        
        # Build and push images
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy to App Runner
      id: deploy-apprunner
      run: |
        # Check service status before deployment
        SERVICE_STATUS=$(aws apprunner describe-service \
          --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN }} \
          --query 'Service.Status' --output text)
        
        echo "App Runner service status: $SERVICE_STATUS"
        
        if [ "$SERVICE_STATUS" = "RUNNING" ]; then
          echo "Service is running, starting deployment..."
          aws apprunner start-deployment \
            --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN }}
        else
          echo "Service is not in RUNNING state. Current state: $SERVICE_STATUS"
          echo "Waiting for service to reach RUNNING state..."
          
          # Wait up to 10 minutes for service to be ready
          for i in {1..20}; do
            sleep 30
            SERVICE_STATUS=$(aws apprunner describe-service \
              --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN }} \
              --query 'Service.Status' --output text)
            echo "Attempt $i: Service status is $SERVICE_STATUS"
            
            if [ "$SERVICE_STATUS" = "RUNNING" ]; then
              echo "Service is now running, starting deployment..."
              aws apprunner start-deployment \
                --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN }}
              break
            elif [ "$SERVICE_STATUS" = "CREATE_FAILED" ] || [ "$SERVICE_STATUS" = "DELETE_FAILED" ]; then
              echo "Service is in failed state: $SERVICE_STATUS"
              exit 1
            fi
            
            if [ $i -eq 20 ]; then
              echo "Timeout waiting for service to be ready"
              exit 1
            fi
          done
        fi
